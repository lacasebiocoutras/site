/**
 * inspired from :
 * - https://github.com/csswizardry/csswizardry.github.com/blob/master/css/_components.carousel.scss
 * - https://github.com/dangvanthanh/carousel.sass
 */




// @mixin slider_infinite($type, $icons) {
@mixin slider_infinite($type) {

  // add class sass xxx_gl, see include scss-liquid/optim/scss.html


  .#{$containerSlider_gl}-#{$type} {


    .#{$slider_gl} {

      margin:0 auto;
      text-align: center;
      // add responsive
      // extra before, specific
      // max-width: 600px;

      // specific infinite
      overflow: hidden;
      position: relative;
      width: 100%;
    }



    .#{$slides_gl} {

      list-style-type: none;

      // specific infinite
      position: relative;
      display: table;
      margin: 0;
      padding: 0;
      //extra before, specific
      // width: $nb_items * 100%;

    }

    .#{$inner__item_gl} {

      // specific infinite
      position: relative;
      top:0;
      display: table-cell;
      //extra before, specific
      // @if $nb_items > 0 {
      //   width: 100% / $nb_items;
      // }
      img {
        width: 100%;
      }
    }


    .#{$slides_gl}:hover {
      animation-play-state: paused;
    }

    /* animation */
    //extra before, specific
    // .slides {
    //   animation: #{$total_time_anim} #{$animation_name} alternate infinite;
    // }

  }




}


// extra opacity
@mixin slider_infinite_extra_before($id, $type, $nb_items, $width, $animation_name, $total_time_anim) {

  // add class sass xxx_gl, see include scss-liquid/optim/scss.html

  .#{$containerSlider_gl}-#{$type} {
    .#{$slider_gl}-#{$type}-#{$id} {

      max-width: $width;

      .#{$slides_gl} {
        width: $nb_items * 100%;
      }

      .#{$inner__item_gl} {

        @if $nb_items > 0 {
          width: 100% / $nb_items;
        }
      }

      .#{$slides_gl} {
        animation: #{$total_time_anim} #{$animation_name} alternate infinite;
      }


    } // /.slider
  }// /.containerSlider
}




/**
 * Generate the slider infinite loop translateX animation, no js
 * based on the number of frames
 * and the pourcentage of a frame spent static
 *
 * @param {Number} $nb_frames - number of frames
 * @param {Number} $static - percentage of the animation spent static per frame
 * @param {String} $animation_name ('carousel') - animation name
 */
 // from : http://hugogiraudel.com/2014/07/16/automating-css-animations-with-sass/


@mixin slider_infinite_keyframe($nb_frames, $static, $animation_name) {
  // Make `$static` a percentage in case it's unitless
  @if unitless($static) {
    $static: percentage($static);
  }

  // Compute the percentage of animation spent animating for each frame
  $animating: (100% - $nb_frames * $static) / ($nb_frames - 1);

  // Output the animation at root level
  // to make sure it doesn't crash if called in a selector
  @at-root {

    // Create an animation
    @keyframes #{$animation_name} {

      // Loop over the frames
      @for $i from 0 to $nb_frames {
        // Compute keyframes
        $current-frame: $i * $static + $i * $animating;
        $next-frame: ($i + 1) * $static + $i * $animating;
        $halfway-frame: $i * $static / 1% + ($i - 1) * $animating + $animating / 2;

        // Output halfway styles for blur
        // Avoid a negative keyframes by making sure `$i` is at least `1`
        @if $i > 0 {
          #{$halfway-frame} {
            filter: blur(2px);
          }
        }

        // Output styles for each frame
        #{$current-frame, $next-frame} {
          transform: translateX($i * -100% / $nb_frames);
          filter: blur(0);
        }
      }
    }
  }
}


// @mixin test_var_sass-parameter() {
//   .#{$testvar_gl} {
//     background-color: magenta;

//     .#{$containerSlider_gl} {
//       background-color: blue;
//     }

//   }

// }
//  $breakpoints: (
//     extralong-c: 'extralong-c',
//     extralong-d: 'extralong-d',
//     extralong-e: 'extralong-e'
//   );

// @mixin test-parameter($parameters) {

//   $extralong-c: 'extralong-c';
//   $extralong-d: 'extralong-d';
//   $extralong-e: 'extralong-e';

//   @each $key in map-keys($breakpoints) {
//     .#{$key} {padding:0;}

//   }



//   .test-param {
//     background-color: yellow;
//   }

//   @each $key, $value in $parameters {

//     .#{$key} {
//       background-color: #{$value};
//     }

//     @if map-has-key($breakpoints, $key) {
//         $new-value : map-get($breakpoints, $key );
//        .#{$extralong-c} {
//         background-color: white;
//         .#{$new-value} {
//           background-color: gold;
//         }
//         $#{$extralong-c}
//       }
//     }
//   }


// }

//from : http://codepen.io/blustemy/pen/mifBg?editors=010
// $icons: (
//   twitter:  (char: "\f099", color: #55acee),
//   google:   (char: "\f0d5", color: #dd4b39),
//   facebook: (char: "\f09a", color: #3b5998),
//   github:   (char: "\f09b", color: #231f20),
//   linkedin: (char: "\f0e1", color: #0977b5),
//   dribbble: (char: "\f17d", color: #ea4c89),
//   rss:      (char: "\f09e", color: #ff6600)
// );
  // @each $social, $icon in $icons {

  //   a[href*="#{$social}"] {
  //     background-color: map-get($icon, color);

  //     &:before {
  //       content: map-get($icon, char);
  //     }
  //   }

  // }
